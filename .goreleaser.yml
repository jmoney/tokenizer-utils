project_name: tokenizer-utils

builds:
  -
    id: tokenizer-cli-darwin-arm64
    main: ./cmd/cli/main.go
    binary: tokenizer
    env:
      - CC=o64-clang
      - CXX=o64-clang++
    flags:
      - -mod=readonly
    ldflags:
      - -extldflags '-L./lib/darwin/arm64' -s -w -X main.version={{.Version}}
    goos:
      - darwin
    goarch:
      - arm64
  -
    id: tokenizer-lambda-linux-arm64
    main: ./cmd/lambda/main.go
    binary: bootstrap
    env:
      - CC=aarch64-linux-gnu-gcc	
      - CXX=aarch64-linux-gnu-g++
    flags:
      - -mod=readonly
    ldflags:
      - -extldflags '-L./lib/linux/arm64' -s -w -X main.version={{.Version}}
    goos:
      - linux
    goarch:
      - arm64
  -
    id: tokenizer-server-linux-arm64
    main: ./cmd/server/main.go
    binary: server
    env:
      - CC=aarch64-linux-gnu-gcc	
      - CXX=aarch64-linux-gnu-g++
    flags:
      - -mod=readonly
    ldflags:
      - -extldflags '-L./lib/linux/arm64' -s -w -X main.version={{.Version}}
    goos:
      - linux
    goarch:
      - arm64

archives:
  -
    id: archive-cli-darwin-arm64
    builds:
      - tokenizer-cli-darwin-arm64

    name_template: "tokenizer_cli_{{ .Version }}_{{ .Os }}_{{ .Arch }}"

  -
    id: archive-lambda-linux-arm64
    builds:
      - tokenizer-lambda-linux-arm64
    name_template: "tokenizer_lambda_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
  -
    id: archive-server-linux-arm64
    builds:
      - tokenizer-server-linux-arm64
    name_template: "tokenizer_server_{{ .Version }}_{{ .Os }}_{{ .Arch }}"

dockers:
  -
    id: lambda-linux-arm64
    goos: linux
    goarch: arm64
    ids:
      - tokenizer-lambda-linux-arm64
    dockerfile: ./Dockerfile.lambda
    image_templates:
      - "ghcr.io/jmoney/tokenizer-lambda:latest"
      - "ghcr.io/jmoney/tokenizer-lambda:{{ .Tag }}"
    push: true

  -
    id: server-linux-arm64
    goos: linux
    goarch: arm64
    ids:
      - tokenizer-server-linux-arm64
    dockerfile: ./Dockerfile.server
    image_templates:
      - "ghcr.io/jmoney/tokenizer-server:latest"
      - "ghcr.io/jmoney/tokenizer-server:{{ .Tag }}"
    push: true

brews:
  -
    name: "tokenizer"

    repository:
      owner: jmoney
      name: homebrew-ai-utils

      branch: main

      token: "{{ .Env.GITHUB_TOKEN }}"
    
    ids:
      - archive-cli-darwin-arm64

    # Git author used to commit to the repository.
    # Defaults are shown.
    commit_author:
      name: goreleaserbot
      email: noreply@gmail.com

    commit_msg_template: "Brew formula update for tokenizer version {{ .Tag }}"

    directory: Formula

    homepage: "https://jmoney.dev/tokenizer-utils"

    description: "CLI for tokenizing text from stdin"

    # SPDX identifier of your app's license.
    # Default is empty.
    license: "Apache 2.0"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Default is false.
    #    skip_upload: true

    # So you can `brew test` your formula.
    # Default is empty.
    test: |
      system "#{bin}/tokenizer -h"

    # Custom install script for brew.
    # Default is 'bin.install "program"'.
    install: |
      bin.install "tokenizer"

  -
    name: "tokenizer@{{ .Tag }}"

    repository:
      owner: jmoney
      name: homebrew-ai-utils

      branch: main

      token: "{{ .Env.GITHUB_TOKEN }}"
    
    ids:
      - archive-cli-darwin-arm64

    # Git author used to commit to the repository.
    # Defaults are shown.
    commit_author:
      name: goreleaserbot
      email: noreply@gmail.com

    commit_msg_template: "Brew formula update for tokenizer version {{ .Tag }}"

    directory: Formula

    homepage: "https://jmoney.dev/tokenizer-utils"

    description: "CLI for tokenizing text from stdin"

    # SPDX identifier of your app's license.
    # Default is empty.
    license: "Apache 2.0"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Default is false.
    #    skip_upload: true

    # So you can `brew test` your formula.
    # Default is empty.
    test: |
      system "#{bin}/tokenizer -h"

    # Custom install script for brew.
    # Default is 'bin.install "program"'.
    install: |
      bin.install "tokenizer"